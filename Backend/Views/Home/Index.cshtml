@using Microsoft.Extensions.Options;
@using Backend.Configuration;

@inject IOptions<ApplicationConfigurations> OptionsApplicationConfiguration
ï»¿
@{
    ViewData["Title"] = "IToast";
}

<div class="container">
    <div class="container-fluid" style="grid-row:span">
        <h2>Toaster</h2>
        <div class="row">
            <div class="col-md-2"><label id="lblMinutes">Time </label></div>
            <div class="col-md-2">
                <input id="minutesInput" type="number" min="0" max="59" placeholder="00" style="width: 45px" />
                <span>:</span>
                <input id="secondsInput" type="number" min="0" max="59" placeholder="00" maxlength="2" style="width: 45px" />
            </div>
            <div class="col-md-2"><input type="button" id="btnSetTime" value="Set Time" onclick="setTime()" /></div>
        </div>
        <div class="row">
            <div class="col-md-2"><label id="lblToasts">Number of toasts: </label></div>
            <div class="col-md-2"><input type="number" id="toastsInput" min="0" placeholder="00" style="width: 45px" /></div>
            <div class="col-md-3"><input type="button" id="btnSetToasts" value="Set Toasts" onclick="setToasts()" /></div>
            <div class="col-md-3"><input type="button" id="btnHowManyToasts" value="Toasts Made" onclick="howManyToastsMade()" /></div>
        </div>
        <div class="row">
            <div class="col-md-2"><label id="lblProfile">Profile: </label></div>
            <div class="col-md-2"><input id="rdLow" type="radio" name="profile" value="1" onclick="setProfile(this.value)">Low</></div>
            <div class="col-md-2"><input id="rdNormal" type="radio" name="profile" value="2" onclick="setProfile(this.value)">Normal</></div>
            <div class="col-md-2"><input id="rdHigh" type="radio" name="profile" value="3" onclick="setProfile(this.value)">High</></div>
            <div class="col-md-2"><input id="rdBurnt" type="radio" name="profile" value="4" onclick="setProfile(this.value)">Burnt</></div>
            <div class="col-md-2"><input type="button" id="btnCurrentProfile" value="Current Profile" onclick="getCurrentProfile()" /></div>
            </div>
        <div class="row">
            <div class="col-md-3">
                <input type="button" id="btnStart" value="Toast!" onclick="setOnToast();" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnStop" value="Stop" onclick="setOffToast();" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnStatus" value="Status" onclick="currentStatus();" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnToasterReset" value="Reset" onclick="reset()" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2"><label id="lblTimer">Time Remaining: </label></div>
            <div class="col-md-2">
                <input id="minutesRemaining" type="number" min="0" max="59" placeholder="00" style="width: 45px" disabled="disabled" />
                <span>:</span>
                <input id="secondsRemaining" type="number" min="0" max="59" placeholder="00" maxlength="2" style="width: 45px" disabled="disabled" />
            </div>
        </div>
        <h2>Pantry</h2>
        <div class="row">
            <div class="col-md-1">
                <input id="inputBreadsToBuy" type="number" min="0" max="100" placeholder="00" maxlength="3" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnBuyBread" value="Buy bread" onclick="buyBread();" />
            </div>
        </div>
	    <div class="row">
            <div class="col-md-3">
                <input type="button" id="btnGetStatus" value="Status" onclick="getPantryStatus();" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnHowMany" value="How Many Breads" onclick="howManyBreads();" />
            </div>
            <div class="col-md-3">
                <input type="button" id="btnPantryHasBread" value="Has Bread?" onclick="pantryHasBread();" />
            </div>
        </div>        
        <h2>Output Screen</h2>
        <div class="row">
            <div class="col-md-3">
                <input type="button" id="btnClearOutput" value="Clear" onclick="clearOutput()" />
            </div>
        </div>
        <div class="row">
            <div id="divOutputResults" class="col-md-12" style='border:1px solid black; height: 180px; overflow-y: scroll; '></div>
        </div> 
    </div>
</div>

<script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script>
<script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js"></script>
<style>
    div{
        padding-bottom: 15px
    }

</style>
<script>
    var curStatus = {
        "0" : 'Off',
        "1" : 'On'
    }

    var curProfile = {
        "0": 'No profile',
        "1": 'Low toast',
        "2": 'Normal toast',
        "3": 'High toast',
        "4": 'Looking at the sun toast'
    }

    var iToastOn = false;
    var uriHead = 'http://localhost:@OptionsApplicationConfiguration.Value.ApplicationPort/api';
  
	var urls = {

		'howmanybreads': {
			"tipo":'GET',
			"url": uriHead +'/pantry/howmanybreads/'
		},
		/* --Toaster--*/
		'settime':{
			"tipo":'PATCH',
			"url": uriHead + '/toaster/SetTime/'
		},
		'settoasts':{
			"tipo":'PATCH',
			"url": uriHead + '/toaster/SetToasts/'
		},
		'getcurrentstatus': {
			"tipo":'GET',
			"url": uriHead +'/toaster/GetCurrentStatus/'
		},
		'setontoast':{
			"tipo": 'PUT',
			"url": uriHead + '/Toaster/api/toasters/toast/1'
		},
		'setofftoast':{
			"tipo": 'PUT',
			"url": uriHead + '/Toaster/api/toasters/toast/0'
		},
		'setprofile':{
			"tipo": 'PATCH',
			"url": uriHead + '/Toaster/setProfile/'
		},
		'howmanytoastsmade':{
			"tipo": 'GET',
			"url": uriHead + '/toaster/HowManyToastsMade'
		},
		'reset':{
			"tipo": 'PUT',
			"url": uriHead + '/toaster/api/toasters/reset'
		},
		'getcurrentprofile':{
			"tipo": 'GET',
			"url": uriHead + '/toaster/GetCurrentProfile'
		},
		/*-- Pantry --*/
		'buybread':{
			"tipo": 'POST',
			"url": uriHead + '/pantry/breads/buy/'
		},
		'getpantrystatus':{
			"tipo": 'GET',
			"url": uriHead + '/pantry/status/'
		},
		'pantryhasbread':{
			"tipo": 'GET',
			"url": uriHead + '/pantry/hasbread/'
        },
        'timeremaining': {
            "tipo": 'GET',
            "url": uriHead + '/toaster/timeRemaining/'

        }

	};

    function clearOutput() {
        $('#divOutputResults').empty();
    };

    function clearFields() {
        $("#btnStart").css("color", "black");

        $("#minutesInput").val('00');
        $("#secondsInput").val('00');

        $("#minutesRemaining").val('00');
        $("#secondsRemaining").val('00');

        $("#toastsInput").val('00');

        $("input").each(function (index, element) {

            if ($(element.type == "radio")) {
                element.checked = false;
            }

        });
    }

	/* ------Toaster--------*/

	function setTime(){
		var minutesToSeconds = document.getElementById('minutesInput').value * 60;
		var seconds =  document.getElementById('secondsInput').value * 1; //!IMP *1
		if (minutesToSeconds == 0 && seconds == 0) {
			errormessages("Check time. Must be almost a second in place.");
			return;
		}

		var totalSeconds = parseInt(parseInt(minutesToSeconds,10) + parseInt(seconds,10));
		
		callAjax(urls["settime"], totalSeconds)
	};

	function setToasts(){
		var toasts = document.getElementById('toastsInput').value * 1;
		callAjax(urls["settoasts"], toasts);
	};

    function currentStatus() {
        callAjax(urls["getcurrentstatus"], null, curStatus);
    };

    function setOnToast() {
        iToastOn = true;
        callAjax(urls["setontoast"]);
	};

    function setOffToast() {
        callAjax(urls["setofftoast"]);
        clearFields();
	};

	function setProfile(valor){
        callAjax(urls["setprofile"], valor);
	};

	function howManyToastsMade(){
		callAjax(urls["howmanytoastsmade"]);
	};
	
    function reset(){
        callAjax(urls["reset"]);
        clearFields();
	};

	function getCurrentProfile(){
        callAjax(urls["getcurrentprofile"], null, curProfile);
	};

    
	/* ------Pantry--------*/

	function howManyBreads(){
		callAjax(urls["howmanybreads"]);
	};

	function getPantryStatus(){
        callAjax(urls["getpantrystatus"]);
	}

	function buyBread(){
		var iBreadsToBuy = parseInt($('#inputBreadsToBuy').val() * 1);
		
		if (iBreadsToBuy < 1) {
			errormessages("Can't buy less 1 bread");
			return;
		};
		callAjax(urls["buybread"], iBreadsToBuy);
	};

	function pantryHasBread(){
		callAjax(urls["pantryhasbread"]);
	}

	/* -------------------- */

	function callAjax(objCalled,params,valueOf){
		console.log('params:'+ params);
        var retValue;
		  $.ajax({
            type: objCalled['tipo'],
            url: (params && (params != null) && (params != 'undefined') ) ? (objCalled['url'] + params) : objCalled['url'],
            contentType: "application/json;charset=utf-8",
            success: function (data, status, xhr) {
                messages('(' + objCalled['url'] + '): ' + (valueOf != null ? valueOf[data] : data)); 
                
            },
            error: function (xhr) {
				errormessages('('+objCalled['url']+'): '+xhr.responseText);
            }
        });
	};

	function messages(msj){
		$('#divOutputResults').append('<p class="text-dark font-weight-bold">'+msj+'</p>');
	}

	function errormessages(msj){
		$('#divOutputResults').append('<p class="text-danger font-weight-bold">'+msj+'</p>');
	}

    $(document).ready(function () {
        var timer = function getTimeRemaining() {
            if (!iToastOn) return iToastOn;

            var objCall = urls["timeremaining"];
            $.ajax({
                type: objCall['tipo'],
                url: objCall['url'],
                contentType: "application/json;charset=utf-8",
                success: function (data, status, xhr) {
                    var seconds = parseInt(data);
                    if (seconds > 0) {
                        $("#btnStart").css("color", "green");
                        $("#minutesRemaining").val(Math.trunc(data / 60) > 0 ? Math.trunc(data / 60) : 0);
                        $("#secondsRemaining").val(Math.trunc(data % 60) >= 0 ? (data - (60 * Math.trunc(data / 60))) : data);
                    }
                    else {
                        $("#minutesRemaining").val(0);
                        $("#secondsRemaining").val(0);
                        setOffToast();
                        $("#btnStart").css("color", "black");
                        iToastOn = false;
                    }

                    return iToastOn;
                },
                error: function (xhr) {
                    if (xhr.status != 417) errormessages('(' + objCall['url'] + '): ' + xhr.responseText);
                }
            });
        }
        setInterval(timer, 1000);
    });

</script>